{"version":3,"file":"lib.umd.js","sources":["../src/BaseConversation.ts","../src/utils/BaseConnection.ts","../src/version.ts","../src/utils/events.ts","../src/utils/overrides.ts","../src/utils/WebSocketConnection.ts","../src/utils/WebRTCConnection.ts","../src/utils/ConnectionFactory.ts","../src/utils/compatibility.ts","../src/utils/applyDelay.ts","../src/TextConversation.ts","../src/utils/audio.ts","../src/utils/createWorkletModuleLoader.ts","../src/utils/rawAudioProcessor.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/VoiceConversation.ts","../src/index.ts","../src/utils/postOverallFeedback.ts"],"sourcesContent":["import type {\n  BaseConnection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/BaseConnection\";\nimport type {\n  AgentAudioEvent,\n  AgentResponseEvent,\n  ClientToolCallEvent,\n  IncomingSocketEvent,\n  InternalTentativeAgentResponseEvent,\n  InterruptionEvent,\n  UserTranscriptionEvent,\n} from \"./utils/events\";\nimport type { InputConfig } from \"./utils/input\";\n\nexport type Role = \"user\" | \"ai\";\n\nexport type Mode = \"speaking\" | \"listening\";\n\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\n\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\n\nexport type PartialOptions = SessionConfig &\n  Partial<Callbacks> &\n  Partial<ClientToolsConfig> &\n  Partial<InputConfig>;\n\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\n\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onAudio: (base64Audio: string) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst EMPTY_FREQUENCY_DATA = new Uint8Array(0);\n\nexport class BaseConversation {\n  protected lastInterruptTimestamp = 0;\n  protected mode: Mode = \"listening\";\n  protected status: Status = \"connecting\";\n  protected volume = 1;\n  protected currentEventId = 1;\n  protected lastFeedbackEventId = 1;\n  protected canSendFeedback = false;\n\n  protected static getFullOptions(partialOptions: PartialOptions): Options {\n    return {\n      clientTools: {},\n      onConnect: () => {},\n      onDebug: () => {},\n      onDisconnect: () => {},\n      onError: () => {},\n      onMessage: () => {},\n      onAudio: () => {},\n      onModeChange: () => {},\n      onStatusChange: () => {},\n      onCanSendFeedbackChange: () => {},\n      ...partialOptions,\n    };\n  }\n\n  protected constructor(\n    protected readonly options: Options,\n    protected readonly connection: BaseConnection\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n    this.connection.onMessage(this.onMessage);\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onModeChange(mode => this.updateMode(mode));\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession() {\n    return this.endSessionWithDetails({ reason: \"user\" });\n  }\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n    await this.handleEndSession();\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  protected async handleEndSession() {\n    this.connection.close();\n  }\n\n  protected updateMode(mode: Mode) {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  }\n\n  protected updateStatus(status: Status) {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  }\n\n  protected updateCanSendFeedback() {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  }\n\n  protected handleInterruption(event: InterruptionEvent) {\n    if (event.interruption_event) {\n      this.lastInterruptTimestamp = event.interruption_event.event_id;\n    }\n  }\n\n  protected handleAgentResponse(event: AgentResponseEvent) {\n    this.options.onMessage({\n      source: \"ai\",\n      message: event.agent_response_event.agent_response,\n    });\n  }\n\n  protected handleUserTranscript(event: UserTranscriptionEvent) {\n    this.options.onMessage({\n      source: \"user\",\n      message: event.user_transcription_event.user_transcript,\n    });\n  }\n\n  protected handleTentativeAgentResponse(\n    event: InternalTentativeAgentResponseEvent\n  ) {\n    this.options.onDebug({\n      type: \"tentative_agent_response\",\n      response:\n        event.tentative_agent_response_internal_event.tentative_agent_response,\n    });\n  }\n\n  protected async handleClientToolCall(event: ClientToolCallEvent) {\n    if (\n      Object.prototype.hasOwnProperty.call(\n        this.options.clientTools,\n        event.client_tool_call.tool_name\n      )\n    ) {\n      try {\n        const result =\n          (await this.options.clientTools[event.client_tool_call.tool_name](\n            event.client_tool_call.parameters\n          )) ?? \"Client tool execution successful.\"; // default client-tool call response\n\n        // The API expects result to be a string, so we need to convert it if it's not already a string\n        const formattedResult =\n          typeof result === \"object\" ? JSON.stringify(result) : String(result);\n\n        this.connection.sendMessage({\n          type: \"client_tool_result\",\n          tool_call_id: event.client_tool_call.tool_call_id,\n          result: formattedResult,\n          is_error: false,\n        });\n      } catch (e) {\n        this.onError(\n          `Client tool execution failed with following error: ${(e as Error)?.message}`,\n          {\n            clientToolName: event.client_tool_call.tool_name,\n          }\n        );\n        this.connection.sendMessage({\n          type: \"client_tool_result\",\n          tool_call_id: event.client_tool_call.tool_call_id,\n          result: `Client tool execution failed: ${(e as Error)?.message}`,\n          is_error: true,\n        });\n      }\n    } else {\n      if (this.options.onUnhandledClientToolCall) {\n        this.options.onUnhandledClientToolCall(event.client_tool_call);\n\n        return;\n      }\n\n      this.onError(\n        `Client tool with name ${event.client_tool_call.tool_name} is not defined on client`,\n        {\n          clientToolName: event.client_tool_call.tool_name,\n        }\n      );\n      this.connection.sendMessage({\n        type: \"client_tool_result\",\n        tool_call_id: event.client_tool_call.tool_call_id,\n        result: `Client tool with name ${event.client_tool_call.tool_name} is not defined on client`,\n        is_error: true,\n      });\n    }\n  }\n\n  protected handleAudio(event: AgentAudioEvent) {}\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        this.handleInterruption(parsedEvent);\n        return;\n      }\n      case \"agent_response\": {\n        this.handleAgentResponse(parsedEvent);\n        return;\n      }\n      case \"user_transcript\": {\n        this.handleUserTranscript(parsedEvent);\n        return;\n      }\n      case \"internal_tentative_agent_response\": {\n        this.handleTentativeAgentResponse(parsedEvent);\n        return;\n      }\n      case \"client_tool_call\": {\n        await this.handleClientToolCall(parsedEvent);\n        return;\n      }\n      case \"audio\": {\n        this.handleAudio(parsedEvent);\n        return;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        return;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        return;\n      }\n    }\n  };\n\n  private onError(message: string, context?: any) {\n    console.error(message, context);\n    this.options.onError(message, context);\n  }\n\n  public getId() {\n    return this.connection.conversationId;\n  }\n\n  public isOpen() {\n    return this.status === \"connected\";\n  }\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public setMicMuted(isMuted: boolean) {\n    this.connection.setMicMuted(isMuted);\n  }\n\n  public getInputByteFrequencyData() {\n    return EMPTY_FREQUENCY_DATA;\n  }\n\n  public getOutputByteFrequencyData() {\n    return EMPTY_FREQUENCY_DATA;\n  }\n\n  public getInputVolume() {\n    return 0;\n  }\n\n  public getOutputVolume() {\n    return 0;\n  }\n\n  public sendFeedback(like: boolean) {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  }\n\n  public sendContextualUpdate(text: string) {\n    this.connection.sendMessage({\n      type: \"contextual_update\",\n      text,\n    });\n  }\n\n  public sendUserMessage(text: string) {\n    this.connection.sendMessage({\n      type: \"user_message\",\n      text,\n    });\n  }\n\n  public sendUserActivity() {\n    this.connection.sendMessage({\n      type: \"user_activity\",\n    });\n  }\n\n  public sendMCPToolApprovalResult(toolCallId: string, isApproved: boolean) {\n    this.connection.sendMessage({\n      type: \"mcp_tool_approval_result\",\n      tool_call_id: toolCallId,\n      is_approved: isApproved,\n    });\n  }\n}\n","import type { IncomingSocketEvent, OutgoingSocketEvent } from \"./events\";\nimport type { Mode } from \"../BaseConversation\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"pt-br\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"hr\"\n  | \"sk\"\n  | \"no\"\n  | \"vi\"\n  | \"tl\";\n\nexport type DelayConfig = {\n  default: number;\n  android?: number;\n  ios?: number;\n};\n\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\n\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\n\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nexport type BaseSessionConfig = {\n  origin?: string;\n  authorization?: string;\n  livekitUrl?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n    conversation?: {\n      textOnly?: boolean;\n    };\n    client?: {\n      source?: string;\n      version?: string;\n    };\n  };\n  customLlmExtraBody?: unknown;\n  dynamicVariables?: Record<string, string | number | boolean>;\n  useWakeLock?: boolean;\n  connectionDelay?: DelayConfig;\n  textOnly?: boolean;\n  userId?: string;\n};\n\nexport type ConnectionType = \"websocket\" | \"webrtc\";\n\nexport type PublicSessionConfig = BaseSessionConfig & {\n  agentId: string;\n  connectionType: ConnectionType;\n  signedUrl?: never;\n  conversationToken?: never;\n};\n\nexport type PrivateWebSocketSessionConfig = BaseSessionConfig & {\n  signedUrl: string;\n  connectionType?: \"websocket\";\n  agentId?: never;\n  conversationToken?: never;\n};\n\nexport type PrivateWebRTCSessionConfig = BaseSessionConfig & {\n  conversationToken: string;\n  connectionType?: \"webrtc\";\n  agentId?: never;\n  signedUrl?: never;\n};\n\n// Union type for all possible session configurations\nexport type SessionConfig =\n  | PublicSessionConfig\n  | PrivateWebSocketSessionConfig\n  | PrivateWebRTCSessionConfig;\n\nexport abstract class BaseConnection {\n  public abstract readonly conversationId: string;\n  public abstract readonly inputFormat: FormatConfig;\n  public abstract readonly outputFormat: FormatConfig;\n\n  protected queue: IncomingSocketEvent[] = [];\n  protected disconnectionDetails: DisconnectionDetails | null = null;\n  protected onDisconnectCallback: OnDisconnectCallback | null = null;\n  protected onMessageCallback: OnMessageCallback | null = null;\n  protected onModeChangeCallback: ((mode: Mode) => void) | null = null;\n  protected onDebug?: (info: unknown) => void;\n\n  constructor(config: { onDebug?: (info: unknown) => void } = {}) {\n    this.onDebug = config.onDebug;\n  }\n\n  protected debug(info: unknown) {\n    if (this.onDebug) this.onDebug(info);\n  }\n\n  public abstract close(): void;\n  public abstract sendMessage(message: OutgoingSocketEvent): void;\n  public abstract setMicMuted(isMuted: boolean): Promise<void>;\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    const queue = this.queue;\n    this.queue = [];\n\n    if (queue.length > 0) {\n      // Make sure the queue is flushed after the constructors finishes and\n      // classes are initialized.\n      queueMicrotask(() => {\n        queue.forEach(callback);\n      });\n    }\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    const details = this.disconnectionDetails;\n    if (details) {\n      // Make sure the event is triggered after the constructors finishes and\n      // classes are initialized.\n      queueMicrotask(() => {\n        callback(details);\n      });\n    }\n  }\n\n  public onModeChange(callback: (mode: Mode) => void) {\n    this.onModeChangeCallback = callback;\n  }\n\n  protected updateMode(mode: Mode) {\n    this.onModeChangeCallback?.(mode);\n  }\n\n  protected disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n\n  protected handleMessage(parsedEvent: IncomingSocketEvent) {\n    if (this.onMessageCallback) {\n      this.onMessageCallback(parsedEvent);\n    } else {\n      this.queue.push(parsedEvent);\n    }\n  }\n}\n\nexport function parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = Number.parseInt(sampleRatePart);\n  if (Number.isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","// This file is auto-generated during build\nexport const PACKAGE_VERSION = \"0.4.4\";\n","import type { Language } from \"./connection\";\nimport type { CONVERSATION_INITIATION_CLIENT_DATA_TYPE } from \"./overrides\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: typeof CONVERSATION_INITIATION_CLIENT_DATA_TYPE;\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n    conversation?: {\n      text_only?: boolean;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n  user_id?: string;\n  source_info?: {\n    source?: string;\n    version?: string;\n  };\n};\nexport type ContextualUpdateEvent = {\n  type: \"contextual_update\";\n  text: string;\n};\nexport type UserMessageEvent = {\n  type: \"user_message\";\n  text: string;\n};\nexport type UserActivityEvent = {\n  type: \"user_activity\";\n};\nexport type MCPToolApprovalResultEvent = {\n  type: \"mcp_tool_approval_result\";\n  tool_call_id: string;\n  is_approved: boolean;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent\n  | ContextualUpdateEvent\n  | UserMessageEvent\n  | UserActivityEvent\n  | MCPToolApprovalResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import type { SessionConfig } from \"./BaseConnection\";\nimport type { InitiationClientDataEvent } from \"./events\";\n\nexport const CONVERSATION_INITIATION_CLIENT_DATA_TYPE =\n  \"conversation_initiation_client_data\";\n\nexport function constructOverrides(\n  config: SessionConfig\n): InitiationClientDataEvent {\n  const overridesEvent: InitiationClientDataEvent = {\n    type: CONVERSATION_INITIATION_CLIENT_DATA_TYPE,\n  };\n\n  if (config.overrides) {\n    overridesEvent.conversation_config_override = {\n      agent: {\n        prompt: config.overrides.agent?.prompt,\n        first_message: config.overrides.agent?.firstMessage,\n        language: config.overrides.agent?.language,\n      },\n      tts: {\n        voice_id: config.overrides.tts?.voiceId,\n      },\n      conversation: {\n        text_only: config.overrides.conversation?.textOnly,\n      },\n    };\n  }\n\n  if (config.customLlmExtraBody) {\n    overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n  }\n\n  if (config.dynamicVariables) {\n    overridesEvent.dynamic_variables = config.dynamicVariables;\n  }\n\n  if (config.userId) {\n    overridesEvent.user_id = config.userId;\n  }\n\n  if (config.overrides?.client) {\n    overridesEvent.source_info = {\n      source: config.overrides.client.source,\n      version: config.overrides.client.version,\n    };\n  }\n\n  return overridesEvent;\n}\n","import {\n  BaseConnection,\n  type SessionConfig,\n  type FormatConfig,\n  parseFormat,\n} from \"./BaseConnection\";\nimport { PACKAGE_VERSION } from \"../version\";\nimport {\n  type ConfigEvent,\n  isValidSocketEvent,\n  type OutgoingSocketEvent,\n} from \"./events\";\nimport { constructOverrides } from \"./overrides\";\n\nconst MAIN_PROTOCOL = \"convai\";\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class WebSocketConnection extends BaseConnection {\n  public readonly conversationId: string;\n  public readonly inputFormat: FormatConfig;\n  public readonly outputFormat: FormatConfig;\n\n  private constructor(\n    private readonly socket: WebSocket,\n    conversationId: string,\n    inputFormat: FormatConfig,\n    outputFormat: FormatConfig\n  ) {\n    super();\n    this.conversationId = conversationId;\n    this.inputFormat = inputFormat;\n    this.outputFormat = outputFormat;\n\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n        this.handleMessage(parsedEvent);\n      } catch (_) {}\n    });\n  }\n\n  public static async create(\n    config: SessionConfig\n  ): Promise<WebSocketConnection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      let url: string;\n\n      const version = config.overrides?.client?.version || PACKAGE_VERSION;\n      const source = config.overrides?.client?.source || \"js_sdk\";\n\n      if (config.signedUrl) {\n        const separator = config.signedUrl.includes(\"?\") ? \"&\" : \"?\";\n        url = `${config.signedUrl}${separator}source=${source}&version=${version}`;\n      } else {\n        url = `${origin}${WSS_API_PATHNAME}${config.agentId}&source=${source}&version=${version}`;\n      }\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent = constructOverrides(config);\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n\n        socket!.addEventListener(\"close\", reject);\n\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new WebSocketConnection(\n        socket,\n        conversation_id,\n        inputFormat,\n        outputFormat\n      );\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public async setMicMuted(isMuted: boolean): Promise<void> {\n    console.warn(\n      `WebSocket connection setMicMuted called with ${isMuted}, but this is handled by VoiceConversation`\n    );\n  }\n}\n","import {\n  BaseConnection,\n  type SessionConfig,\n  type FormatConfig,\n  parseFormat,\n} from \"./BaseConnection\";\nimport { PACKAGE_VERSION } from \"../version\";\nimport { isValidSocketEvent, type OutgoingSocketEvent } from \"./events\";\nimport { Room, RoomEvent, Track, ConnectionState } from \"livekit-client\";\nimport type {\n  RemoteAudioTrack,\n  Participant,\n  TrackPublication,\n} from \"livekit-client\";\nimport {\n  constructOverrides,\n  CONVERSATION_INITIATION_CLIENT_DATA_TYPE,\n} from \"./overrides\";\n\nconst DEFAULT_LIVEKIT_WS_URL = \"wss://livekit.rtc.elevenlabs.io\";\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\n// Convert WSS origin to HTTPS for API calls\nfunction convertWssToHttps(origin: string): string {\n  return origin.replace(/^wss:\\/\\//, \"https://\");\n}\n\nexport type ConnectionConfig = SessionConfig & {\n  onDebug?: (info: unknown) => void;\n};\n\nexport class WebRTCConnection extends BaseConnection {\n  public conversationId: string;\n  public readonly inputFormat: FormatConfig;\n  public readonly outputFormat: FormatConfig;\n\n  private room: Room;\n  private isConnected = false;\n\n  private constructor(\n    room: Room,\n    conversationId: string,\n    inputFormat: FormatConfig,\n    outputFormat: FormatConfig,\n    config: { onDebug?: (info: unknown) => void } = {}\n  ) {\n    super(config);\n    this.room = room;\n    this.conversationId = conversationId;\n    this.inputFormat = inputFormat;\n    this.outputFormat = outputFormat;\n\n    this.setupRoomEventListeners();\n  }\n\n  public static async create(\n    config: ConnectionConfig\n  ): Promise<WebRTCConnection> {\n    let conversationToken: string;\n\n    // Handle different authentication scenarios\n    if (\"conversationToken\" in config && config.conversationToken) {\n      // Direct token provided\n      conversationToken = config.conversationToken;\n    } else if (\"agentId\" in config && config.agentId) {\n      // Agent ID provided - fetch token from API\n      try {\n        const version = config.overrides?.client?.version || PACKAGE_VERSION;\n        const source = config.overrides?.client?.source || \"js_sdk\";\n        const configOrigin = config.origin ?? HTTPS_API_ORIGIN;\n        const origin = convertWssToHttps(configOrigin); //origin is wss, not https\n        const url = `${origin}/v1/convai/conversation/token?agent_id=${config.agentId}&source=${source}&version=${version}`;\n        const response = await fetch(url);\n\n        if (!response.ok) {\n          throw new Error(\n            `ElevenLabs API returned ${response.status} ${response.statusText}`\n          );\n        }\n\n        const data = await response.json();\n        conversationToken = data.token;\n\n        if (!conversationToken) {\n          throw new Error(\"No conversation token received from API\");\n        }\n      } catch (error) {\n        let msg = error instanceof Error ? error.message : String(error);\n        if (error instanceof Error && error.message.includes(\"401\")) {\n          msg =\n            \"Your agent has authentication enabled, but no signed URL or conversation token was provided.\";\n        }\n\n        throw new Error(\n          `Failed to fetch conversation token for agent ${config.agentId}: ${msg}`\n        );\n      }\n    } else {\n      throw new Error(\n        \"Either conversationToken or agentId is required for WebRTC connection\"\n      );\n    }\n\n    const room = new Room();\n\n    try {\n      // Create connection instance first to set up event listeners\n      const conversationId = `webrtc-${Date.now()}`;\n      const inputFormat = parseFormat(\"pcm_48000\");\n      const outputFormat = parseFormat(\"pcm_48000\");\n      const connection = new WebRTCConnection(\n        room,\n        conversationId,\n        inputFormat,\n        outputFormat,\n        config\n      );\n\n      // Use configurable LiveKit URL or default if not provided\n      const livekitUrl = config.livekitUrl || DEFAULT_LIVEKIT_WS_URL;\n\n      // Connect to the LiveKit room and wait for the Connected event\n      await room.connect(livekitUrl, conversationToken);\n\n      // Wait for the Connected event to ensure isConnected is true\n      await new Promise<void>(resolve => {\n        if (connection.isConnected) {\n          resolve();\n        } else {\n          const onConnected = () => {\n            room.off(RoomEvent.Connected, onConnected);\n            resolve();\n          };\n          room.on(RoomEvent.Connected, onConnected);\n        }\n      });\n\n      // Update conversation ID with actual room name if available\n      if (room.name) {\n        connection.conversationId = room.name;\n      }\n\n      // Enable microphone and send overrides\n      await room.localParticipant.setMicrophoneEnabled(true);\n\n      const overridesEvent = constructOverrides(config);\n\n      connection.debug({\n        type: CONVERSATION_INITIATION_CLIENT_DATA_TYPE,\n        message: overridesEvent,\n      });\n\n      await connection.sendMessage(overridesEvent);\n\n      return connection;\n    } catch (error) {\n      await room.disconnect();\n      throw error;\n    }\n  }\n\n  private setupRoomEventListeners() {\n    this.room.on(RoomEvent.Connected, async () => {\n      this.isConnected = true;\n      console.info(\"WebRTC room connected\");\n    });\n\n    this.room.on(RoomEvent.Disconnected, reason => {\n      this.isConnected = false;\n      this.disconnect({\n        reason: \"agent\",\n        context: new CloseEvent(\"close\", { reason: reason?.toString() }),\n      });\n    });\n\n    this.room.on(RoomEvent.ConnectionStateChanged, state => {\n      if (state === ConnectionState.Disconnected) {\n        this.isConnected = false;\n        this.disconnect({\n          reason: \"error\",\n          message: `LiveKit connection state changed to ${state}`,\n          context: new Event(\"connection_state_changed\"),\n        });\n      }\n    });\n\n    // Handle incoming data messages\n    this.room.on(RoomEvent.DataReceived, (payload: Uint8Array, participant) => {\n      try {\n        const message = JSON.parse(new TextDecoder().decode(payload));\n\n        // Filter out audio messages for WebRTC - they're handled via audio tracks\n        if (message.type === \"audio\") {\n          return;\n        }\n\n        if (isValidSocketEvent(message)) {\n          this.handleMessage(message);\n        } else {\n          console.warn(\"Invalid socket event received:\", message);\n        }\n      } catch (error) {\n        console.warn(\"Failed to parse incoming data message:\", error);\n        console.warn(\"Raw payload:\", new TextDecoder().decode(payload));\n      }\n    });\n\n    this.room.on(\n      RoomEvent.TrackSubscribed,\n      async (\n        track: Track,\n        publication: TrackPublication,\n        participant: Participant\n      ) => {\n        if (\n          track.kind === Track.Kind.Audio &&\n          participant.identity.includes(\"agent\")\n        ) {\n          // Play the audio track\n          const remoteAudioTrack = track as RemoteAudioTrack;\n          const audioElement = remoteAudioTrack.attach();\n          audioElement.autoplay = true;\n          audioElement.controls = false;\n\n          // Add to DOM (hidden) to ensure it plays\n          audioElement.style.display = \"none\";\n          document.body.appendChild(audioElement);\n        }\n      }\n    );\n\n    this.room.on(\n      RoomEvent.ActiveSpeakersChanged,\n      async (speakers: Participant[]) => {\n        if (speakers.length > 0) {\n          const participant = speakers[0];\n          if (participant.identity.includes(\"agent\")) {\n            this.updateMode(\"speaking\");\n          }\n        } else {\n          this.updateMode(\"listening\");\n        }\n      }\n    );\n  }\n\n  public close() {\n    if (this.isConnected) {\n      this.room.disconnect();\n    }\n  }\n\n  public async sendMessage(message: OutgoingSocketEvent) {\n    if (!this.isConnected || !this.room.localParticipant) {\n      console.warn(\n        \"Cannot send message: room not connected or no local participant\"\n      );\n      return;\n    }\n\n    // In WebRTC mode, audio is sent via published tracks, not data messages\n    if (\"user_audio_chunk\" in message) {\n      // Ignore audio data messages - audio flows through WebRTC tracks\n      return;\n    }\n\n    try {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(JSON.stringify(message));\n\n      await this.room.localParticipant.publishData(data, { reliable: true });\n    } catch (error) {\n      this.debug({\n        type: \"send_message_error\",\n        message: {\n          message,\n          error,\n        },\n      });\n      console.error(\"Failed to send message via WebRTC:\", error);\n    }\n  }\n\n  // Get the room instance for advanced usage\n  public getRoom(): Room {\n    return this.room;\n  }\n\n  public async setMicMuted(isMuted: boolean): Promise<void> {\n    if (!this.isConnected || !this.room.localParticipant) {\n      console.warn(\n        \"Cannot set microphone muted: room not connected or no local participant\"\n      );\n      return;\n    }\n\n    // Get the microphone track publication\n    const micTrackPublication = this.room.localParticipant.getTrackPublication(\n      Track.Source.Microphone\n    );\n\n    if (micTrackPublication?.track) {\n      try {\n        // Use LiveKit's built-in track muting\n        if (isMuted) {\n          await micTrackPublication.track.mute();\n        } else {\n          await micTrackPublication.track.unmute();\n        }\n      } catch (error) {\n        // If track muting fails, fall back to participant-level control\n        await this.room.localParticipant.setMicrophoneEnabled(!isMuted);\n      }\n    } else {\n      // No track found, use participant-level control directly\n      await this.room.localParticipant.setMicrophoneEnabled(!isMuted);\n    }\n  }\n}\n","import type {\n  BaseConnection,\n  SessionConfig,\n  ConnectionType,\n} from \"./BaseConnection\";\nimport { WebSocketConnection } from \"./WebSocketConnection\";\nimport { WebRTCConnection } from \"./WebRTCConnection\";\n\nfunction determineConnectionType(config: SessionConfig): ConnectionType {\n  // If connectionType is explicitly specified, use it\n  if (config.connectionType) {\n    return config.connectionType;\n  }\n\n  // If conversationToken is provided, use WebRTC\n  if (\"conversationToken\" in config && config.conversationToken) {\n    return \"webrtc\";\n  }\n\n  // Default to WebSocket for backward compatibility\n  return \"websocket\";\n}\n\nexport async function createConnection(\n  config: SessionConfig\n): Promise<BaseConnection> {\n  const connectionType = determineConnectionType(config);\n\n  switch (connectionType) {\n    case \"websocket\":\n      return WebSocketConnection.create(config);\n    case \"webrtc\":\n      return WebRTCConnection.create(config);\n    default:\n      throw new Error(`Unknown connection type: ${connectionType}`);\n  }\n}\n","export function isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport function isAndroidDevice() {\n  return /android/i.test(navigator.userAgent);\n}\n","import { isAndroidDevice, isIosDevice } from \"./compatibility\";\nimport type { DelayConfig } from \"./connection\";\n\nexport async function applyDelay(\n  delayConfig: DelayConfig = {\n    default: 0,\n    // Give the Android AudioManager enough time to switch to the correct audio mode\n    android: 3_000,\n  }\n) {\n  let delay = delayConfig.default;\n  if (isAndroidDevice()) {\n    delay = delayConfig.android ?? delay;\n  } else if (isIosDevice()) {\n    delay = delayConfig.ios ?? delay;\n  }\n\n  if (delay > 0) {\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n}\n","import { createConnection } from \"./utils/ConnectionFactory\";\nimport type { BaseConnection } from \"./utils/BaseConnection\";\nimport { applyDelay } from \"./utils/applyDelay\";\nimport { BaseConversation, type PartialOptions } from \"./BaseConversation\";\n\nexport class TextConversation extends BaseConversation {\n  public static async startSession(\n    options: PartialOptions\n  ): Promise<TextConversation> {\n    const fullOptions = BaseConversation.getFullOptions(options);\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let connection: BaseConnection | null = null;\n    try {\n      await applyDelay(fullOptions.connectionDelay);\n      connection = await createConnection(options);\n      return new TextConversation(fullOptions, connection);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      connection?.close();\n      throw error;\n    }\n  }\n}\n","export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","const URLCache = new Map<string, string>();\n\nexport function createWorkletModuleLoader(name: string, sourceCode: string) {\n  return async (worklet: AudioWorklet) => {\n    const url = URLCache.get(name);\n    if (url) {\n      return worklet.addModule(url);\n    }\n\n    const blob = new Blob([sourceCode], { type: \"application/javascript\" });\n    const blobURL = URL.createObjectURL(blob);\n    try {\n      await worklet.addModule(blobURL);\n      URLCache.set(name, blobURL);\n      return;\n    } catch {\n      URL.revokeObjectURL(blobURL);\n    }\n\n    try {\n      // Attempting to start a conversation in Safari inside an iframe will\n      // throw a CORS error because the blob:// protocol is considered\n      // cross-origin. In such cases, fall back to using a base64 data URL:\n      const base64 = btoa(sourceCode);\n      const moduleURL = `data:application/javascript;base64,${base64}`;\n      await worklet.addModule(moduleURL);\n      URLCache.set(name, moduleURL);\n    } catch (error) {\n      throw new Error(\n        `Failed to load the ${name} worklet module. Make sure the browser supports AudioWorklets.`\n      );\n    }\n  };\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nimport { createWorkletModuleLoader } from \"./createWorkletModuleLoader\";\n\nexport const loadRawAudioProcessor = createWorkletModuleLoader(\n  \"raw-audio-processor\",\n  // language=JavaScript\n  `\nconst BIAS = 0x84;\nconst CLIP = 32635;\nconst encodeTable = [\n  0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n];\n\nfunction encodeSample(sample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let muLawSample;\n  sign = (sample >> 8) & 0x80;\n  if (sign !== 0) sample = -sample;\n  sample = sample + BIAS;\n  if (sample > CLIP) sample = CLIP;\n  exponent = encodeTable[(sample>>7) & 0xFF];\n  mantissa = (sample >> (exponent+3)) & 0x0F;\n  muLawSample = ~(sign | (exponent << 4) | mantissa);\n  \n  return muLawSample;\n}\n\nclass RawAudioProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n              \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case \"setFormat\":\n          this.isMuted = false;\n          this.buffer = []; // Initialize an empty buffer\n          this.bufferSize = data.sampleRate / 4;\n          this.format = data.format;\n\n          if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n            globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n              this.resampler = resampler;\n            });\n          }\n          break;\n        case \"setMuted\":\n          this.isMuted = data.isMuted;\n          break;\n      }\n    };\n  }\n  process(inputs) {\n    if (!this.buffer) {\n      return true;\n    }\n    \n    const input = inputs[0]; // Get the first input node\n    if (input.length > 0) {\n      let channelData = input[0]; // Get the first channel's data\n\n      // Resample the audio if necessary\n      if (this.resampler) {\n        channelData = this.resampler.full(channelData);\n      }\n\n      // Add channel data to the buffer\n      this.buffer.push(...channelData);\n      // Get max volume \n      let sum = 0.0;\n      for (let i = 0; i < channelData.length; i++) {\n        sum += channelData[i] * channelData[i];\n      }\n      const maxVolume = Math.sqrt(sum / channelData.length);\n      // Check if buffer size has reached or exceeded the threshold\n      if (this.buffer.length >= this.bufferSize) {\n        const float32Array = this.isMuted \n          ? new Float32Array(this.buffer.length)\n          : new Float32Array(this.buffer);\n\n        let encodedArray = this.format === \"ulaw\"\n          ? new Uint8Array(float32Array.length)\n          : new Int16Array(float32Array.length);\n\n        // Iterate through the Float32Array and convert each sample to PCM16\n        for (let i = 0; i < float32Array.length; i++) {\n          // Clamp the value to the range [-1, 1]\n          let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n          // Scale the sample to the range [-32768, 32767]\n          let value = sample < 0 ? sample * 32768 : sample * 32767;\n          if (this.format === \"ulaw\") {\n            value = encodeSample(Math.round(value));\n          }\n\n          encodedArray[i] = value;\n        }\n\n        // Send the buffered data to the main script\n        this.port.postMessage([encodedArray, maxVolume]);\n\n        // Clear the buffer after sending\n        this.buffer = [];\n      }\n    }\n    return true; // Continue processing\n  }\n}\nregisterProcessor(\"raw-audio-processor\", RawAudioProcessor);\n`\n);\n","import { loadRawAudioProcessor } from \"./rawAudioProcessor\";\nimport type { FormatConfig } from \"./connection\";\nimport { isIosDevice } from \"./compatibility\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: true,\n        noiseSuppression: true,\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await loadRawAudioProcessor(context.audioWorklet);\n\n      const constraints = { voiceIsolation: true, ...options };\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: constraints,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      await context.resume();\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n\n  public setMuted(isMuted: boolean) {\n    this.worklet.port.postMessage({ type: \"setMuted\", isMuted });\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nimport { createWorkletModuleLoader } from \"./createWorkletModuleLoader\";\n\nexport const loadAudioConcatProcessor = createWorkletModuleLoader(\n  \"audio-concat-processor\",\n  // language=JavaScript\n  `\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\n\nexport function decodeSample(muLawSample) {\n  let sign;\n  let exponent;\n  let mantissa;\n  let sample;\n  muLawSample = ~muLawSample;\n  sign = (muLawSample & 0x80);\n  exponent = (muLawSample >> 4) & 0x07;\n  mantissa = muLawSample & 0x0F;\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\n  if (sign !== 0) sample = -sample;\n\n  return sample;\n}\n\nclass AudioConcatProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.buffers = []; // Initialize an empty buffer\n    this.cursor = 0;\n    this.currentBuffer = null;\n    this.wasInterrupted = false;\n    this.finished = false;\n    \n    this.port.onmessage = ({ data }) => {\n      switch (data.type) {\n        case \"setFormat\":\n          this.format = data.format;\n          break;\n        case \"buffer\":\n          this.wasInterrupted = false;\n          this.buffers.push(\n            this.format === \"ulaw\"\n              ? new Uint8Array(data.buffer)\n              : new Int16Array(data.buffer)\n          );\n          break;\n        case \"interrupt\":\n          this.wasInterrupted = true;\n          break;\n        case \"clearInterrupted\":\n          if (this.wasInterrupted) {\n            this.wasInterrupted = false;\n            this.buffers = [];\n            this.currentBuffer = null;\n          }\n      }\n    };\n  }\n  process(_, outputs) {\n    let finished = false;\n    const output = outputs[0][0];\n    for (let i = 0; i < output.length; i++) {\n      if (!this.currentBuffer) {\n        if (this.buffers.length === 0) {\n          finished = true;\n          break;\n        }\n        this.currentBuffer = this.buffers.shift();\n        this.cursor = 0;\n      }\n\n      let value = this.currentBuffer[this.cursor];\n      if (this.format === \"ulaw\") {\n        value = decodeSample(value);\n      }\n      output[i] = value / 32768;\n      this.cursor++;\n\n      if (this.cursor >= this.currentBuffer.length) {\n        this.currentBuffer = null;\n      }\n    }\n\n    if (this.finished !== finished) {\n      this.finished = finished;\n      this.port.postMessage({ type: \"process\", finished });\n    }\n\n    return true; // Continue processing\n  }\n}\n\nregisterProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n`\n);\n","import { loadAudioConcatProcessor } from \"./audioConcatProcessor\";\nimport type { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await loadAudioConcatProcessor(context.audioWorklet);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      await context.resume();\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { createConnection } from \"./utils/ConnectionFactory\";\nimport type { BaseConnection } from \"./utils/BaseConnection\";\nimport { WebRTCConnection } from \"./utils/WebRTCConnection\";\nimport type { AgentAudioEvent, InterruptionEvent } from \"./utils/events\";\nimport { applyDelay } from \"./utils/applyDelay\";\nimport {\n  BaseConversation,\n  type Options,\n  type PartialOptions,\n} from \"./BaseConversation\";\n\nexport class VoiceConversation extends BaseConversation {\n  public static async startSession(\n    options: PartialOptions\n  ): Promise<VoiceConversation> {\n    const fullOptions = BaseConversation.getFullOptions(options);\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: BaseConnection | null = null;\n    let output: Output | null = null;\n    let preliminaryInputStream: MediaStream | null = null;\n\n    let wakeLock: WakeLockSentinel | null = null;\n    if (options.useWakeLock ?? true) {\n      try {\n        wakeLock = await navigator.wakeLock.request(\"screen\");\n      } catch (e) {\n        // Wake Lock is not required for the conversation to work\n      }\n    }\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      await applyDelay(fullOptions.connectionDelay);\n      connection = await createConnection(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      preliminaryInputStream = null;\n\n      return new VoiceConversation(\n        fullOptions,\n        connection,\n        input,\n        output,\n        wakeLock\n      );\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      try {\n        await wakeLock?.release();\n        wakeLock = null;\n      } catch (e) {}\n      throw error;\n    }\n  }\n\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n\n  protected constructor(\n    options: Options,\n    connection: BaseConnection,\n    public readonly input: Input,\n    public readonly output: Output,\n    public wakeLock: WakeLockSentinel | null\n  ) {\n    super(options, connection);\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n  }\n\n  protected override async handleEndSession() {\n    await super.handleEndSession();\n    try {\n      await this.wakeLock?.release();\n      this.wakeLock = null;\n    } catch (e) {}\n\n    await this.input.close();\n    await this.output.close();\n  }\n\n  protected override handleInterruption(event: InterruptionEvent) {\n    super.handleInterruption(event);\n    this.fadeOutAudio();\n  }\n\n  protected override handleAudio(event: AgentAudioEvent) {\n    if (this.lastInterruptTimestamp <= event.audio_event.event_id) {\n      this.options.onAudio(event.audio_event.audio_base_64);\n      this.addAudioBase64Chunk(event.audio_event.audio_base_64);\n      this.currentEventId = event.audio_event.event_id;\n      this.updateCanSendFeedback();\n      this.updateMode(\"speaking\");\n    }\n  }\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n\n    // TODO: When supported, maxVolume can be used to avoid sending silent audio\n    // const maxVolume = event.data[1];\n\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n      });\n    }\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public setMicMuted(isMuted: boolean) {\n    // Use LiveKit track muting for WebRTC connections\n    if (this.connection instanceof WebRTCConnection) {\n      this.connection.setMicMuted(isMuted);\n    } else {\n      // Use input muting for WebSocket connections\n      this.input.setMuted(isMuted);\n    }\n  }\n\n  public getInputByteFrequencyData() {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  }\n\n  public getOutputByteFrequencyData() {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  }\n\n  public getInputVolume() {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  }\n\n  public getOutputVolume() {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  }\n}\n","import { BaseConversation, type PartialOptions } from \"./BaseConversation\";\nimport { TextConversation } from \"./TextConversation\";\nimport { VoiceConversation } from \"./VoiceConversation\";\n\nexport type {\n  Mode,\n  Role,\n  Options,\n  PartialOptions,\n  ClientToolsConfig,\n  Callbacks,\n  Status,\n} from \"./BaseConversation\";\nexport type { InputConfig } from \"./utils/input\";\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type {\n  SessionConfig,\n  BaseSessionConfig,\n  DisconnectionDetails,\n  Language,\n  ConnectionType,\n} from \"./utils/BaseConnection\";\nexport { createConnection } from \"./utils/ConnectionFactory\";\nexport { WebSocketConnection } from \"./utils/WebSocketConnection\";\nexport { WebRTCConnection } from \"./utils/WebRTCConnection\";\nexport { postOverallFeedback } from \"./utils/postOverallFeedback\";\n\nexport class Conversation extends BaseConversation {\n  public static startSession(options: PartialOptions): Promise<Conversation> {\n    return options.textOnly\n      ? TextConversation.startSession(options)\n      : VoiceConversation.startSession(options);\n  }\n}\n","const HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["EMPTY_FREQUENCY_DATA","Uint8Array","BaseConversation","options","connection","_this3","this","_this","_this2","lastInterruptTimestamp","mode","status","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSessionWithDetails","details","Promise","resolve","updateStatus","handleEndSession","then","onDisconnect","e","reject","onMessage","parsedEvent","type","handleInterruption","handleAgentResponse","handleUserTranscript","handleTentativeAgentResponse","handleClientToolCall","handleAudio","sendMessage","event_id","ping_event","onDebug","setVolume","_ref","onConnect","conversationId","onModeChange","updateMode","getFullOptions","partialOptions","_extends","clientTools","onError","onAudio","onStatusChange","onCanSendFeedbackChange","_proto","prototype","endSession","reason","close","updateCanSendFeedback","event","interruption_event","source","message","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","_this5","Object","hasOwnProperty","call","client_tool_call","tool_name","_temp","parameters","result","formattedResult","JSON","stringify","String","tool_call_id","is_error","_catch","clientToolName","onUnhandledClientToolCall","context","console","error","getId","isOpen","setMicMuted","isMuted","getInputByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","like","score","warn","sendContextualUpdate","text","sendUserMessage","sendUserActivity","sendMCPToolApprovalResult","toolCallId","isApproved","is_approved","BaseConnection","config","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","onModeChangeCallback","debug","info","callback","length","queueMicrotask","forEach","_this$onModeChangeCal","disconnect","_this$onDisconnectCal","handleMessage","push","parseFormat","format","_format$split","split","formatPart","sampleRatePart","includes","Error","sampleRate","Number","parseInt","isNaN","PACKAGE_VERSION","isValidSocketEvent","CONVERSATION_INITIATION_CLIENT_DATA_TYPE","constructOverrides","_config$overrides","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","_config$overrides$con","overridesEvent","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","conversation","text_only","textOnly","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","userId","user_id","client","source_info","version","WebSocketConnection","_BaseConnection","socket","inputFormat","outputFormat","addEventListener","setTimeout","code","parse","data","_","_inheritsLoose","create","_config$origin","_config$overrides2","url","origin","signedUrl","separator","agentId","protocols","authorization","WebSocket","_socket","send","once","conversation_initiation_metadata_event","conversationConfig","conversation_id","agent_output_audio_format","user_input_audio_format","_socket2","WebRTCConnection","room","isConnected","setupRoomEventListeners","conversationToken","_temp2","_result3","Room","Date","now","connect","livekitUrl","onConnected","off","RoomEvent","Connected","on","name","localParticipant","setMicrophoneEnabled","replace","convertWssToHttps","fetch","ok","statusText","json","token","msg","_this4","Disconnected","CloseEvent","toString","ConnectionStateChanged","state","ConnectionState","Event","DataReceived","payload","participant","TextDecoder","decode","TrackSubscribed","track","publication","kind","Track","Kind","Audio","identity","audioElement","attach","autoplay","controls","style","display","document","body","appendChild","ActiveSpeakersChanged","speakers","_temp3","TextEncoder","encode","publishData","reliable","getRoom","_this6","micTrackPublication","getTrackPublication","Source","Microphone","_temp4","mute","unmute","createConnection","connectionType","determineConnectionType","isIosDevice","navigator","platform","userAgent","applyDelay","delayConfig","default","android","_delayConfig$android","delay","test","_delayConfig$ios","ios","TextConversation","_BaseConversation","apply","arguments","startSession","fullOptions","connectionDelay","_createConnection","_connection","base64ToArrayBuffer","base64","binaryString","window","atob","len","bytes","i","charCodeAt","buffer","URLCache","Map","createWorkletModuleLoader","sourceCode","worklet","_exit","_result","moduleURL","btoa","addModule","set","get","blob","Blob","blobURL","URL","createObjectURL","revokeObjectURL","loadRawAudioProcessor","Input","analyser","inputStream","preferHeadphonesForIosDevices","audioWorklet","constraints","voiceIsolation","mediaDevices","getUserMedia","audio","_navigator$mediaDevic","createMediaStreamSource","AudioWorkletNode","port","postMessage","resume","supportsSampleRateConstraint","getSupportedConstraints","AudioContext","createAnalyser","ideal","echoCancellation","noiseSuppression","enumerateDevices","availableDevices","idealDevice","find","d","keyword","label","toLowerCase","deviceId","_inputStream","_context","getTracks","stop","setMuted","loadAudioConcatProcessor","Output","gain","createGain","destination","VoiceConversation","input","output","wakeLock","inputFrequencyData","outputFrequencyData","onInputWorkletMessage","b","user_audio_chunk","fromCharCode","onOutputWorkletMessage","finished","addAudioBase64Chunk","chunk","value","fadeOutAudio","exponentialRampToValueAtTime","currentTime","calculateVolume","frequencyData","onmessage","_temp5","preliminaryInputStream","all","_Promise$all","_preliminaryInputStre","_preliminaryInputStre2","_input","_output","_wakeLock","release","_options$useWakeLock","useWakeLock","request","_navigator$wakeLock$r","_temp7","_temp6","_this2$wakeLock","audio_event","audio_base_64","frequencyBinCount","getByteFrequencyData","Conversation","method","feedback","headers"],"mappings":"ssBA8DA,IAAMA,EAAuB,IAAIC,WAAW,GAE/BC,eAAgB,WAyB3B,SAAAA,EACqBC,EACAC,OAA0BC,EAAAC,KAAAC,EAczCD,KAAIE,EA+HJF,KA9IeH,KAAAA,oBACAC,gBAAA,EAAAE,KA1BXG,uBAAyB,EACzBC,KAAAA,KAAa,YAAWJ,KACxBK,OAAiB,kBACjBC,OAAS,EACTC,KAAAA,eAAiB,EAACP,KAClBQ,oBAAsB,OACtBC,iBAAkB,EAiCpBC,KAAAA,+BAA+BC,GAA6B,IAClE,MAAoB,cAAhBV,EAAKI,QAA0C,eAAhBJ,EAAKI,OAAyBO,QAAAC,WACjEZ,EAAKa,aAAa,iBAAiBF,QAAAC,QAC7BZ,EAAKc,oBAAkBC,gBAC7Bf,EAAKa,aAAa,gBAClBb,EAAKJ,QAAQoB,aAAaN,EAAS,GACrC,CAAC,MAAAO,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,EAAAlB,KAuHOoB,UAAS,SAAUC,GAAoC,IAC7D,OAAQA,EAAYC,MAClB,IAAK,eAEH,OADApB,EAAKqB,mBAAmBF,GACxBT,QAAAC,UAEF,IAAK,iBAEH,OADAX,EAAKsB,oBAAoBH,GACzBT,QAAAC,UAEF,IAAK,kBAEH,OADAX,EAAKuB,qBAAqBJ,GAC1BT,QAAAC,UAEF,IAAK,oCAEH,OADAX,EAAKwB,6BAA6BL,GAClCT,QAAAC,UAEF,IAAK,mBAAoB,OAAAD,QAAAC,QACjBX,EAAKyB,qBAAqBN,IAAYL,KAE9C,cACA,IAAK,QAEH,OADAd,EAAK0B,YAAYP,GACjBT,QAAAC,UAGF,IAAK,OAOH,OANAX,EAAKJ,WAAW+B,YAAY,CAC1BP,KAAM,OACNQ,SAAUT,EAAYU,WAAWD,WAInClB,QAAAC,UAIF,QAEE,OADAX,EAAKL,QAAQmC,QAAQX,GACrBT,QAAAC,UAGN,CAAC,MAAAK,GAAAN,OAAAA,QAAAO,OAAAD,EAeMe,CAAAA,EAAAA,KAAAA,UAAY,SAAAC,GACjBnC,EAAKO,OADqB4B,EAAN5B,MAEtB,EAvMqBN,KAAOH,QAAPA,EACAG,KAAUF,WAAVA,EAEnBE,KAAKH,QAAQsC,UAAU,CAAEC,eAAgBtC,EAAWsC,iBACpDpC,KAAKF,WAAWsB,UAAUpB,KAAKoB,WAC/BpB,KAAKF,WAAWmB,aAAajB,KAAKU,uBAClCV,KAAKF,WAAWuC,aAAa,SAAAjC,UAAQL,EAAKuC,WAAWlC,EAAK,GAC1DJ,KAAKc,aAAa,YACpB,CAAClB,EAzBgB2C,eAAP,SAAsBC,GAC9B,OAAAC,GACEC,YAAa,GACbP,UAAW,WAAQ,EACnBH,QAAS,WAAK,EACdf,aAAc,WAAK,EACnB0B,QAAS,aACTvB,UAAW,WAAQ,EACnBwB,QAAS,WAAQ,EACjBP,aAAc,WAAK,EACnBQ,eAAgB,aAChBC,wBAAyB,WAAQ,GAC9BN,EAEP,MAACO,EAAAnD,EAAAoD,iBAAAD,EAaME,WAAA,WACL,OAAOjD,KAAKU,sBAAsB,CAAEwC,OAAQ,QAC9C,EAACH,EAUehC,iBAAgB,eACN,OAAxBf,KAAKF,WAAWqD,QAAQvC,QAAAC,SAC1B,CAAC,MAAAK,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,EAAA6B,EAEST,WAAA,SAAWlC,GACfA,IAASJ,KAAKI,OAChBJ,KAAKI,KAAOA,EACZJ,KAAKH,QAAQwC,aAAa,CAAEjC,KAAAA,IAEhC,EAAC2C,EAESjC,aAAA,SAAaT,GACjBA,IAAWL,KAAKK,SAClBL,KAAKK,OAASA,EACdL,KAAKH,QAAQgD,eAAe,CAAExC,OAAAA,IAElC,EAAC0C,EAESK,sBAAA,WACR,IAAM3C,EAAkBT,KAAKO,iBAAmBP,KAAKQ,oBACjDR,KAAKS,kBAAoBA,IAC3BT,KAAKS,gBAAkBA,EACvBT,KAAKH,QAAQiD,wBAAwB,CAAErC,gBAAAA,IAE3C,EAACsC,EAESxB,mBAAA,SAAmB8B,GACvBA,EAAMC,qBACRtD,KAAKG,uBAAyBkD,EAAMC,mBAAmBxB,SAE3D,EAACiB,EAESvB,oBAAA,SAAoB6B,GAC5BrD,KAAKH,QAAQuB,UAAU,CACrBmC,OAAQ,KACRC,QAASH,EAAMI,qBAAqBC,gBAExC,EAACX,EAEStB,qBAAA,SAAqB4B,GAC7BrD,KAAKH,QAAQuB,UAAU,CACrBmC,OAAQ,OACRC,QAASH,EAAMM,yBAAyBC,iBAE5C,EAACb,EAESrB,6BAAA,SACR2B,GAEArD,KAAKH,QAAQmC,QAAQ,CACnBV,KAAM,2BACNuC,SACER,EAAMS,wCAAwCC,0BAEpD,EAAChB,EAEepB,qBAAA,SAAqB0B,OAA0BW,IAAAA,EAGzDhE,YAAIY,QAAAC,QADNoD,WAAAA,GAAAA,OAAOjB,UAAUkB,eAAeC,KAC9BH,EAAKnE,QAAQ6C,YACbW,EAAMe,iBAAiBC,WACxBC,CAAAA,IAAAA,0BAEG1D,QAAAC,QAEOmD,EAAKnE,QAAQ6C,YAAYW,EAAMe,iBAAiBC,WACrDhB,EAAMe,iBAAiBG,aACxBvD,cAHGwD,GAMN,IAAMC,EACc,iBAAXD,EAAsBE,KAAKC,UAAUH,GAAUI,OAAOJ,GAE/DR,EAAKlE,WAAW+B,YAAY,CAC1BP,KAAM,qBACNuD,aAAcxB,EAAMe,iBAAiBS,aACrCL,OAAQC,EACRK,UAAU,GACT,4DAjBJC,CAAA,EAkBA,SAAQ7D,GACP8C,EAAKrB,+DAC+D,MAAXzB,OAAW,EAAXA,EAAasC,SACpE,CACEwB,eAAgB3B,EAAMe,iBAAiBC,YAG3CL,EAAKlE,WAAW+B,YAAY,CAC1BP,KAAM,qBACNuD,aAAcxB,EAAMe,iBAAiBS,aACrCL,yCAAqD,MAAXtD,OAAW,EAAXA,EAAasC,SACvDsB,UAAU,GAEd,GAAC,GAAAR,GAAAA,EAAAtD,KAAA,OAAAsD,EAAAtD,wBAED,GAAIgD,EAAKnE,QAAQoF,0BAGf,YAFAjB,EAAKnE,QAAQoF,0BAA0B5B,EAAMe,kBAK/CJ,EAAKrB,QACsBU,yBAAAA,EAAMe,iBAAiBC,UAChD,4BAAA,CACEW,eAAgB3B,EAAMe,iBAAiBC,YAG3CL,EAAKlE,WAAW+B,YAAY,CAC1BP,KAAM,qBACNuD,aAAcxB,EAAMe,iBAAiBS,aACrCL,OAAiCnB,yBAAAA,EAAMe,iBAAiBC,UAAoC,4BAC5FS,UAAU,GACT,CAAA,CArDHb,GAuDJ,CAAC,MAAA/C,UAAAN,QAAAO,OAAAD,KAAA6B,EAESnB,YAAA,SAAYyB,GAAsB,EAAIN,EA+CxCJ,QAAA,SAAQa,EAAiB0B,GAC/BC,QAAQC,MAAM5B,EAAS0B,GACvBlF,KAAKH,QAAQ8C,QAAQa,EAAS0B,EAChC,EAACnC,EAEMsC,MAAA,WACL,YAAYvF,WAAWsC,cACzB,EAACW,EAEMuC,OAAA,WACL,MAAuB,mBAAXjF,MACd,EAAC0C,EAMMwC,YAAA,SAAYC,GACjBxF,KAAKF,WAAWyF,YAAYC,EAC9B,EAACzC,EAEM0C,0BAAA,WACL,OAAO/F,CACT,EAACqD,EAEM2C,2BAAA,WACL,OAAOhG,CACT,EAACqD,EAEM4C,eAAA,WACL,QACF,EAAC5C,EAEM6C,gBAAA,WACL,OACF,CAAA,EAAC7C,EAEM8C,aAAA,SAAaC,GACb9F,KAAKS,iBASVT,KAAKF,WAAW+B,YAAY,CAC1BP,KAAM,WACNyE,MAAOD,EAAO,OAAS,UACvBhE,SAAU9B,KAAKO,iBAEjBP,KAAKQ,oBAAsBR,KAAKO,eAChCP,KAAKoD,yBAdH+B,QAAQa,KACuB,IAA7BhG,KAAKQ,oBACD,8DACA,iFAYV,EAACuC,EAEMkD,qBAAA,SAAqBC,GAC1BlG,KAAKF,WAAW+B,YAAY,CAC1BP,KAAM,oBACN4E,KAAAA,GAEJ,EAACnD,EAEMoD,gBAAA,SAAgBD,GACrBlG,KAAKF,WAAW+B,YAAY,CAC1BP,KAAM,eACN4E,KAAAA,GAEJ,EAACnD,EAEMqD,iBAAA,WACLpG,KAAKF,WAAW+B,YAAY,CAC1BP,KAAM,iBAEV,EAACyB,EAEMsD,0BAAA,SAA0BC,EAAoBC,GACnDvG,KAAKF,WAAW+B,YAAY,CAC1BP,KAAM,2BACNuD,aAAcyB,EACdE,YAAaD,GAEjB,EAAC3G,CAAA,CApS0B,GC8DP6G,eAAc,WAYlC,SAAAA,EAAYC,YAAAA,IAAAA,EAAgD,CAAA,GAAE1G,KAPpD2G,MAA+B,QAC/BC,qBAAoD,KACpDC,KAAAA,qBAAoD,KAAI7G,KACxD8G,kBAA8C,UAC9CC,qBAAsD,KACtD/E,KAAAA,eAGRhC,KAAKgC,QAAU0E,EAAO1E,OACxB,CAAC,IAAAe,EAAA0D,EAAAzD,iBAAAD,EAESiE,MAAA,SAAMC,GACVjH,KAAKgC,SAAShC,KAAKgC,QAAQiF,EACjC,EAAClE,EAMM3B,UAAA,SAAU8F,GACflH,KAAK8G,kBAAoBI,EACzB,IAAMP,EAAQ3G,KAAK2G,MACnB3G,KAAK2G,MAAQ,GAETA,EAAMQ,OAAS,GAGjBC,eAAe,WACbT,EAAMU,QAAQH,EAChB,EAEJ,EAACnE,EAEM9B,aAAA,SAAaiG,GAClBlH,KAAK6G,qBAAuBK,EAC5B,IAAMvG,EAAUX,KAAK4G,qBACjBjG,GAGFyG,eAAe,WACbF,EAASvG,EACX,EAEJ,EAACoC,EAEMV,aAAA,SAAa6E,GAClBlH,KAAK+G,qBAAuBG,CAC9B,EAACnE,EAEST,WAAA,SAAWlC,GAAU,IAAAkH,EAC7BA,OAAAA,EAAItH,KAAC+G,uBAALO,EAAAnD,KAAAnE,KAA4BI,EAC9B,EAAC2C,EAESwE,WAAA,SAAW5G,OACa6G,EAA3BxH,KAAK4G,uBACR5G,KAAK4G,qBAAuBjG,EACH,OAAzB6G,EAAAxH,KAAK6G,uBAALW,EAAArD,UAA4BxD,GAEhC,EAACoC,EAES0E,cAAA,SAAcpG,GAClBrB,KAAK8G,kBACP9G,KAAK8G,kBAAkBzF,GAEvBrB,KAAK2G,MAAMe,KAAKrG,EAEpB,EAACoF,CAAA,CAvEiC,GA0EpB,SAAAkB,EAAYC,GAC1B,IAAAC,EAAqCD,EAAOE,MAAM,KAA3CC,EAAUF,KAAEG,EAAcH,EACjC,GAAA,IAAK,CAAC,MAAO,QAAQI,SAASF,GAC5B,MAAM,IAAIG,MAAK,mBAAoBN,GAGrC,IAAMO,EAAaC,OAAOC,SAASL,GACnC,GAAII,OAAOE,MAAMH,GACf,UAAUD,8BAA8BF,GAG1C,MAAO,CACLJ,OAAQG,EACRI,WAAAA,EAEJ,CCtNa,IAAAI,EAAkB,QCuIf,SAAAC,EAAmBnF,GACjC,QAASA,EAAM/B,IACjB,CCvIO,IAAMmH,EACX,sCAEc,SAAAC,EACdhC,GAAqB,IAAAiC,EAMCC,EAAAC,EAAAC,EAAAC,EAAAC,EAJhBC,EAA4C,CAChD3H,KAAMmH,GAsCR,OAnCI/B,EAAOwC,YACTD,EAAeE,6BAA+B,CAC5CC,MAAO,CACLC,OAAQT,OAAFA,EAAElC,EAAOwC,UAAUE,YAAjBR,EAAAA,EAAwBS,OAChCC,cAAeT,OAAFA,EAAEnC,EAAOwC,UAAUE,YAAjBP,EAAAA,EAAwBU,aACvCC,SAAgC,OAAxBV,EAAEpC,EAAOwC,UAAUE,YAAK,EAAtBN,EAAwBU,UAEpCC,IAAK,CACHC,SAA8B,OAAtBX,EAAErC,EAAOwC,UAAUO,UAAG,EAApBV,EAAsBY,SAElCC,aAAc,CACZC,UAAwC,OAA/Bb,EAAEtC,EAAOwC,UAAUU,mBAAY,EAA7BZ,EAA+Bc,YAK5CpD,EAAOqD,qBACTd,EAAee,sBAAwBtD,EAAOqD,oBAG5CrD,EAAOuD,mBACThB,EAAeiB,kBAAoBxD,EAAOuD,kBAGxCvD,EAAOyD,SACTlB,EAAemB,QAAU1D,EAAOyD,QAG9BxB,OAAJA,EAAIjC,EAAOwC,YAAPP,EAAkB0B,SACpBpB,EAAeqB,YAAc,CAC3B/G,OAAQmD,EAAOwC,UAAUmB,OAAO9G,OAChCgH,QAAS7D,EAAOwC,UAAUmB,OAAOE,UAI9BtB,CACT,CCnCA,IAIauB,eAAoBC,SAAAA,GAK/B,SAAAD,EACmBE,EACjBtI,EACAuI,EACAC,GAA0B3K,IAAAA,EA8CvB,OA5CHA,EAAAwK,EAAAtG,KAAAnE,OAAQC,MALSyK,YAAA,EAAAzK,EALHmC,oBAAc,EAAAnC,EACd0K,mBAAW1K,EACX2K,kBAGG3K,EAAAA,EAAMyK,OAANA,EAMjBzK,EAAKmC,eAAiBA,EACtBnC,EAAK0K,YAAcA,EACnB1K,EAAK2K,aAAeA,EAEpB3K,EAAKyK,OAAOG,iBAAiB,QAAS,SAAAxH,GAIpCyH,WACE,WACE,OAAA7K,EAAKsH,WAAW,CACdrE,OAAQ,QACRM,QAAS,mDACT0B,QAAS7B,GACT,EACJ,EAEJ,GAEApD,EAAKyK,OAAOG,iBAAiB,QAAS,SAAAxH,GACpCpD,EAAKsH,WACY,MAAflE,EAAM0H,KACF,CACE7H,OAAQ,QACRgC,QAAS7B,GAEX,CACEH,OAAQ,QACRM,QACEH,EAAMH,QAAU,2CAClBgC,QAAS7B,GAGnB,GAEApD,EAAKyK,OAAOG,iBAAiB,UAAW,SAAAxH,GACtC,IACE,IAAMhC,EAAcqD,KAAKsG,MAAM3H,EAAM4H,MACrC,IAAKzC,EAAmBnH,GACtB,OAEFpB,EAAKwH,cAAcpG,EACrB,CAAE,MAAO6J,GAAG,CACd,GAAGjL,CACL,CAACkL,EAAAX,EAAAC,GAAAD,EAEmBY,OAAA,SAClB1E,GAAqB,IAErB,IAAIgE,EAA2B,KAAK,OAAA9J,QAAAC,2CAEhCwK,IAAAA,EAAA1C,EAAA2C,EAEEC,EADEC,EAAsBH,OAAhBA,EAAG3E,EAAO8E,QAAMH,EAnEX,0BAsEXd,GAA0B,OAAhB5B,EAAAjC,EAAOwC,mBAASP,EAAhBA,EAAkB0B,eAAlB1B,EAA0B4B,UAAWhC,EAC/ChF,GAAyB+H,OAAhBA,EAAA5E,EAAOwC,mBAASoC,EAAhBA,EAAkBjB,eAAlBiB,EAA0B/H,SAAU,SAEnD,GAAImD,EAAO+E,UAAW,CACpB,IAAMC,EAAYhF,EAAO+E,UAAUxD,SAAS,KAAO,IAAM,IACzDsD,EAAS7E,GAAAA,EAAO+E,UAAYC,EAAS,UAAUnI,EAAM,YAAYgH,CACnE,MACEgB,EAASC,EA5EQ,oCA4EoB9E,EAAOiF,mBAAkBpI,EAAM,YAAYgH,EAGlF,IAAMqB,EAAY,CAjFF,UAqFuB,OAHnClF,EAAOmF,eACTD,EAAUlE,KAAehB,UAAAA,EAAOmF,eAElCnB,EAAS,IAAIoB,UAAUP,EAAKK,GAAWhL,QAAAC,QAEN,IAAID,QAEnC,SAACC,EAASM,GACVuJ,EAAQG,iBACN,OACA,WAAKkB,IAAAA,EACG9C,EAAiBP,EAAmBhC,GAEpC,OAANqF,EAAArB,IAAAqB,EAAQC,KAAKtH,KAAKC,UAAUsE,GAC9B,EACA,CAAEgD,MAAM,IAGVvB,EAAQG,iBAAiB,QAAS,SAAAxH,GAIhCyH,WAAW,kBAAM3J,EAAOkC,EAAM,EAAE,EAClC,GAEAqH,EAAQG,iBAAiB,QAAS1J,GAElCuJ,EAAQG,iBACN,UACA,SAACxH,GACC,IAAMG,EAAUkB,KAAKsG,MAAM3H,EAAM4H,MAE5BzC,EAAmBhF,KAIH,qCAAjBA,EAAQlC,KACVT,EAAQ2C,EAAQ0I,wCAEhB/G,QAAQa,KACN,wDAGN,EACA,CAAEiG,MAAM,GAEZ,IAAEjL,KAAA,SAzCImL,GA2CN,IACEC,EAGED,EAHFC,gBACAC,EAEEF,EAFFE,0BACAC,EACEH,EADFG,wBAGI3B,EAAchD,EAAY2E,MAAAA,EAAAA,EAA2B,aACrD1B,EAAejD,EAAY0E,GAEjC,OAAO,IAAI7B,EACTE,EACA0B,EACAzB,EACAC,EACA,EACJ,6DAhFoC7F,YAgF3BK,OAAOmH,EAEd,MADM,OAANA,EAAA7B,IAAA6B,EAAQpJ,QACFiC,CACR,GACF,CAAC,MAAAlE,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,EAAA,IAAA6B,EAAAyH,EAAAxH,UAcA,OAdAD,EAEMI,MAAA,WACLnD,KAAK0K,OAAOvH,OACd,EAACJ,EAEMlB,YAAA,SAAY2B,GACjBxD,KAAK0K,OAAOsB,KAAKtH,KAAKC,UAAUnB,GAClC,EAACT,EAEYwC,qBAAYC,GAAgB,IAGrC,OAFFL,QAAQa,qDAC0CR,EAAO,8CACvD5E,QAAAC,SACJ,CAAC,MAAAK,GAAAN,OAAAA,QAAAO,OAAAD,EAAA,CAAA,EAAAsJ,CAAA,CA/J8BC,CAAQhE,0FCa5B,IAAA+F,eAAiB/B,SAAAA,GAQ5B,SAAA+B,EACEC,EACArK,EACAuI,EACAC,EACAlE,GAAkDzG,IAAAA,EAQnB,YAR/B,IAAAyG,IAAAA,EAAgD,CAAE,IAElDzG,EAAAwK,EAAAtG,UAAMuC,UAdDtE,oBAAcnC,EAAAA,EACL0K,iBAAW,EAAA1K,EACX2K,oBAAY3K,EAEpBwM,UAAI,EAAAxM,EACJyM,aAAc,EAUpBzM,EAAKwM,KAAOA,EACZxM,EAAKmC,eAAiBA,EACtBnC,EAAK0K,YAAcA,EACnB1K,EAAK2K,aAAeA,EAEpB3K,EAAK0M,0BAA0B1M,CACjC,CAACkL,EAAAqB,EAAA/B,GAAA+B,EAEmBpB,OAAA,SAClB1E,GAAwB,IAAA,IAEpBkG,EAFoBC,EAAAA,SAAAC,GA+CxB,IAAML,EAAO,IAAIM,EAAMA,KAAC,OAAAhI,EAAA,WAItB,IAAM3C,EAAc,UAAa4K,KAAKC,MAChCtC,EAAchD,EAAY,aAC1BiD,EAAejD,EAAY,aAC3B7H,EAAa,IAAI0M,EACrBC,EACArK,EACAuI,EACAC,EACAlE,GAI6D,OAAA9F,QAAAC,QAGzD4L,EAAKS,QAHQxG,EAAOyG,YApGD,kCAuGMP,IAAkB5L,KAAAJ,WAAAA,OAAAA,QAAAC,QAG3C,IAAID,QAAc,SAAAC,GACtB,GAAIf,EAAW4M,YACb7L,QACK,CACL,IAAMuM,EAAc,WAClBX,EAAKY,IAAIC,EAASA,UAACC,UAAWH,GAC9BvM,GACF,EACA4L,EAAKe,GAAGF,EAAAA,UAAUC,UAAWH,EAC/B,CACF,IAAEpM,KAAA,WAKD,OAFGyL,EAAKgB,OACP3N,EAAWsC,eAAiBqK,EAAKgB,MAClC7M,QAAAC,QAGK4L,EAAKiB,iBAAiBC,sBAAqB,IAAK3M,KAEtD,WAAA,IAAMiI,EAAiBP,EAAmBhC,GAKvC,OAHH5G,EAAWkH,MAAM,CACf1F,KAAMmH,EACNjF,QAASyF,IACRrI,QAAAC,QAEGf,EAAW+B,YAAYoH,IAAejI,KAE5C,WAAA,OAAOlB,CAAW,EAAA,EAAA,EAAA,EACpB,EAASsF,SAAAA,GAAOxE,OAAAA,QAAAC,QACR4L,EAAKlF,cAAYvG,gBACvB,MAAMoE,CAAM,EACd,IApG8Bd,kBAG1B,sBAAuBoC,KAAUA,EAAOkG,kBAEG,OAAA,WAAA,GACpC,YAAalG,GAAUA,EAAOiF,QAAO,OAAA5G,EAE1C,WAAA,IAAA4D,EAAA2C,EAAAD,EACId,UAAU5B,EAAAjC,EAAOwC,mBAASP,EAAhBA,EAAkB0B,eAAlB1B,EAA0B4B,UAAWhC,EAC/ChF,GAAyB+H,OAAhBA,EAAA5E,EAAOwC,YAAPoC,OAAgBA,EAAhBA,EAAkBjB,aAAlBiB,EAAAA,EAA0B/H,SAAU,SAE7CiI,EA/Cd,SAA2BA,GACzB,OAAOA,EAAOoC,QAAQ,YAAa,WACrC,CA6CuBC,CADmBxC,OAAhBA,EAAG3E,EAAO8E,QAAMH,EAjDjB,6BAmDmG,OAAAzK,QAAAC,QAC7FiN,MADRtC,EAAM,0CAA0C9E,EAAOiF,QAAkBpI,WAAAA,cAAkBgH,IACzEvJ,KAAA,SAA3B6C,GAEN,IAAKA,EAASkK,GACZ,UAAU7F,iCACmBrE,EAASxD,OAAUwD,IAAAA,EAASmK,YAE1D,OAAApN,QAAAC,QAEkBgD,EAASoK,QAAMjN,cAA5BiK,GACyB,KAA/B2B,EAAoB3B,EAAKiD,OAGvB,MAAM,IAAIhG,MAAM,0CAEpB,EAAA,EAAA,WAAS9C,GACP,IAAI+I,EAAM/I,aAAiB8C,MAAQ9C,EAAM5B,QAAUoB,OAAOQ,GAM1D,MALIA,aAAiB8C,OAAS9C,EAAM5B,QAAQyE,SAAS,SACnDkG,EACE,oGAGMjG,MACwCxB,gDAAAA,EAAOiF,aAAYwC,EAEvE,GAEA,UAAUjG,MACR,yEApC2C,GAA7C0E,EAAoBlG,EAAOkG,4BAqCzBhM,QAAAC,QAAAyD,GAAAA,EAAAtD,KAAAsD,EAAAtD,KAAA6L,GAAAA,IA2DN,CAAC,MAAA3L,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,EAAA,IAAA6B,EAAAyJ,EAAAxJ,UA8JA,OA9JAD,EAEO4J,wBAAA,WAAuB5M,IAAAA,EAAAG,KAAAA,EAE3BF,KAAIoO,EA0EEpO,KA3ERA,KAAKyM,KAAKe,GAAGF,EAASA,UAACC,UAAsB,WAAA,IAEL,OADtCrN,EAAKwM,aAAc,EACnBvH,QAAQ8B,KAAK,yBAAyBrG,QAAAC,SACxC,CAAC,MAAAK,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,GAEDlB,KAAKyM,KAAKe,GAAGF,EAASA,UAACe,aAAc,SAAAnL,GACnCnD,EAAK2M,aAAc,EACnB3M,EAAKwH,WAAW,CACdrE,OAAQ,QACRgC,QAAS,IAAIoJ,WAAW,QAAS,CAAEpL,OAAQA,MAAAA,OAAAA,EAAAA,EAAQqL,cAEvD,GAEAvO,KAAKyM,KAAKe,GAAGF,EAASA,UAACkB,uBAAwB,SAAAC,GACzCA,IAAUC,EAAAA,gBAAgBL,eAC5BtO,EAAK2M,aAAc,EACnB3M,EAAKwH,WAAW,CACdrE,OAAQ,QACRM,QAAO,uCAAyCiL,EAChDvJ,QAAS,IAAIyJ,MAAM,8BAGzB,GAGA3O,KAAKyM,KAAKe,GAAGF,EAAAA,UAAUsB,aAAc,SAACC,EAAqBC,GACzD,IACE,IAAMtL,EAAUkB,KAAKsG,OAAM,IAAI+D,aAAcC,OAAOH,IAGpD,GAAqB,UAAjBrL,EAAQlC,KACV,OAGEkH,EAAmBhF,GACrBzD,EAAK0H,cAAcjE,GAEnB2B,QAAQa,KAAK,iCAAkCxC,EAEnD,CAAE,MAAO4B,GACPD,QAAQa,KAAK,yCAA0CZ,GACvDD,QAAQa,KAAK,gBAAgB,IAAI+I,aAAcC,OAAOH,GACxD,CACF,GAEA7O,KAAKyM,KAAKe,GACRF,EAAAA,UAAU2B,gBAERC,SAAAA,EACAC,EACAL,GACE,IACF,GACEI,EAAME,OAASC,EAAAA,MAAMC,KAAKC,OAC1BT,EAAYU,SAASvH,SAAS,SAC9B,CAEA,IACMwH,EADmBP,EACaQ,SACtCD,EAAaE,UAAW,EACxBF,EAAaG,UAAW,EAGxBH,EAAaI,MAAMC,QAAU,OAC7BC,SAASC,KAAKC,YAAYR,EAC5B,CAAC,OAAA7O,QAAAC,SACH,CAAC,MAAAK,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,GAGHlB,KAAKyM,KAAKe,GACRF,YAAU4C,+BACHC,GAAuB,IAQ3B,OAPGA,EAAShJ,OAAS,EACAgJ,EAAS,GACbX,SAASvH,SAAS,UAChCmG,EAAK9L,WAAW,YAGlB8L,EAAK9L,WAAW,aACjB1B,QAAAC,SACH,CAAC,MAAAK,UAAAN,QAAAO,OAAAD,KAEL,EAAC6B,EAEMI,MAAA,WACDnD,KAAK0M,aACP1M,KAAKyM,KAAKlF,YAEd,EAACxE,EAEYlB,YAAW,SAAC2B,GAA4B,IAAA,IAAAQ,EAC9ChE,KAAL,IAAKgE,EAAK0I,cAAgB1I,EAAKyI,KAAKiB,iBAIlC,OAHAvI,QAAQa,KACN,mEAEFpF,QAAAC,UAIF,GAAI,qBAAsB2C,EAExB,OAAA5C,QAAAC,UACD,IAAAuP,EAAArL,EAEG,WACF,IACMkG,GADU,IAAIoF,aACCC,OAAO5L,KAAKC,UAAUnB,IAAU,OAAA5C,QAAAC,QAE/CmD,EAAKyI,KAAKiB,iBAAiB6C,YAAYtF,EAAM,CAAEuF,UAAU,KAAOxP,kBACxE,EAAC,SAAQoE,GACPpB,EAAKgD,MAAM,CACT1F,KAAM,qBACNkC,QAAS,CACPA,QAAAA,EACA4B,MAAAA,KAGJD,QAAQC,MAAM,qCAAsCA,EACtD,UAACxE,QAAAC,QAAAuP,GAAAA,EAAApP,KAAAoP,EAAApP,KACH,WAAA,QAAA,EAAA,CAAC,MAAAE,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,EAAA6B,EAGM0N,QAAA,WACL,YAAYhE,IACd,EAAC1J,EAEYwC,YAAW,SAACC,GAAgB,IAAA,IAAAkL,EAClC1Q,KAAL,IAAK0Q,EAAKhE,cAAgBgE,EAAKjE,KAAKiB,iBAIlC,OAHAvI,QAAQa,KACN,2EAEFpF,QAAAC,UAIF,IAAM8P,EAAsBD,EAAKjE,KAAKiB,iBAAiBkD,oBACrDvB,EAAAA,MAAMwB,OAAOC,YACb,OAAAlQ,QAAAC,QAEE8P,MAAAA,GAAAA,EAAqBzB,MAAKnK,EAAA,eACxBgM,EAEEvL,EAAO5E,QAAAC,QACH8P,EAAoBzB,MAAM8B,QAAMhQ,KAAAJ,WAAAA,GAAAA,QAAAC,QAEhC8P,EAAoBzB,MAAM+B,UAAQjQ,KAAA+P,WAAAA,GAAAA,GAAAA,GAAAA,EAAA/P,KAAA+P,OAAAA,EAAA/P,KAAA,WAAA,EAE5C,EAAC,WAAeJ,OAAAA,QAAAC,QAER6P,EAAKjE,KAAKiB,iBAAiBC,sBAAsBnI,IAAQxE,KACjE,WAAA,EAAA,GAACJ,QAAAC,QAGK6P,EAAKjE,KAAKiB,iBAAiBC,sBAAsBnI,IAAQxE,KAEnE,WAAA,GAAA,CAAC,MAAAE,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,EAAAsL,CAAA,CA9R2B/B,CAAQhE,GCRhByK,EAAgB,SACpCxK,GAAqB,IAErB,IAAMyK,EAlBR,SAAiCzK,GAE/B,OAAIA,EAAOyK,eACFzK,EAAOyK,eAIZ,sBAAuBzK,GAAUA,EAAOkG,kBACnC,SAIF,WACT,CAKyBwE,CAAwB1K,GAE/C,OAAQyK,GACN,IAAK,YACH,OAAAvQ,QAAAC,QAAO2J,EAAoBY,OAAO1E,IACpC,IAAK,SACH,OAAA9F,QAAAC,QAAO2L,EAAiBpB,OAAO1E,IACjC,QACE,MAAU,IAAAwB,MAAkCiJ,4BAAAA,GAElD,CAAC,MAAAjQ,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,WCpCemQ,IACd,MACE,CACE,iBACA,mBACA,iBACA,OACA,SACA,QACApJ,SAASqJ,UAAUC,WAEpBD,UAAUE,UAAUvJ,SAAS,QAAU,eAAgB8H,QAE5D,CCVsB,IAAA0B,EAAU,SAC9BC,QAAAA,IAAAA,IAAAA,EAA2B,CACzBC,QAAS,EAETC,QAAS,MACV,IAED,IACuBC,EADnBC,EAAQJ,EAAW,QACvB,GDKO,WAAWK,KAAKT,UAAUE,WCJ/BM,EAA2BD,OAAtBA,EAAGH,EAAYE,SAAOC,EAAIC,OACtBT,GAAAA,IAAe,CAAAW,IAAAA,EACxBF,EAAuBE,OAAlBA,EAAGN,EAAYO,KAAGD,EAAIF,CAC7B,CAAC,IAAAxN,EAAA,WAAA,GAEGwN,EAAQ,EAAC,OAAAlR,QAAAC,QACL,IAAID,QAAQ,SAAAC,UAAWiK,WAAWjK,EAASiR,EAAM,IAAC9Q,KAAAJ,WAAAA,EAAAA,CAHzD,GAGyDA,OAAAA,QAAAC,QAAAyD,GAAAA,EAAAtD,KAAAsD,EAAAtD,KAE5D,WAAA,QAAA,EAAA,CAAC,MAAAE,GAAAN,OAAAA,QAAAO,OAAAD,EAAA,CAAA,ECfYgR,eAAiB,SAAAC,GAAAD,SAAAA,IAAAC,OAAAA,EAAAC,MAAAC,KAAAA,YAAAlH,IAAAA,CAmB3B,OAnB2BA,EAAA+G,EAAAC,GAAAD,EACRI,aAAY,SAC9BzS,GAAuB,IAEvB,IAAM0S,EAAc3S,EAAiB2C,eAAe1C,GAEpD0S,EAAY1P,eAAe,CAAExC,OAAQ,eACrCkS,EAAYzP,wBAAwB,CAAErC,iBAAiB,IAEvD,IAAIX,EAAoC,KAAK,OAAAc,QAAAC,gCACzCD,QAAAC,QACI4Q,EAAWc,EAAYC,kBAAgBxR,KAAAJ,WAAAA,OAAAA,QAAAC,QAC1BqQ,EAAiBrR,IAAQmB,KAAAyR,SAAAA,GAC5C,OAAO,IAAIP,EAAiBK,EAD5BzS,EAAU2S,EAC2C,EACvD,4DAL6C1N,CACzC,EAIKK,SAAAA,GAAOsN,IAAAA,EAGd,MAFAH,EAAY1P,eAAe,CAAExC,OAAQ,iBAC3B,OAAVqS,EAAA5S,IAAA4S,EAAYvP,QACNiC,CACR,GACF,CAAC,MAAAlE,GAAA,OAAAN,QAAAO,OAAAD,EAAA,CAAA,EAAAgR,CAAA,CAnB2B,CAAQtS,GCEtB,SAAA+S,EAAoBC,GAIlC,IAHA,IAAMC,EAAeC,OAAOC,KAAKH,GAC3BI,EAAMH,EAAa1L,OACnB8L,EAAQ,IAAItT,WAAWqT,GACpBE,EAAI,EAAGA,EAAIF,EAAKE,IACvBD,EAAMC,GAAKL,EAAaM,WAAWD,GAErC,OAAOD,EAAMG,MACf,wFCfA,IAAMC,EAAW,IAAIC,IAEL,SAAAC,EAA0B9F,EAAc+F,GACtD,OAAcC,SAAAA,GAAyB,IAAA,IA4BpCC,EA5BoC7G,EAAA,SAAA8G,GAAAD,OAAAA,EAAAC,EAAA5O,EAAA,WAoBnC,IACM6O,EAAkDhB,sCADzCiB,KAAKL,GAC6C,OAAA5S,QAAAC,QAC3D4S,EAAQK,UAAUF,IAAU5S,gBAClCqS,EAASU,IAAItG,EAAMmG,EAAW,EAChC,EAAgB,WACd,MAAM,IAAI1L,4BACcuF,EAAI,iEAE9B,EAACiG,EA3BKnI,EAAM8H,EAASW,IAAIvG,GACzB,GAAIlC,EACF,OAAA3K,QAAAC,QAAO4S,EAAQK,UAAUvI,IAG3B,IAAM0I,EAAO,IAAIC,KAAK,CAACV,GAAa,CAAElS,KAAM,2BACtC6S,EAAUC,IAAIC,gBAAgBJ,GAAM3P,EAAAS,EACtC,WAAA,OAAAnE,QAAAC,QACI4S,EAAQK,UAAUK,IAAQnT,gBAChCqS,EAASU,IAAItG,EAAM0G,GAAST,EAE9B,CAAA,EAAA,EAAQ,WACNU,IAAIE,gBAAgBH,EACtB,GAACvT,OAAAA,QAAAC,QAAAyD,GAAAA,EAAAtD,KAAAsD,EAAAtD,KAAA6L,GAAAA,EAAAvI,GAeH,CAAC,MAAApD,GAAA,OAAAN,QAAAO,OAAAD,EACH,CAAA,CAAA,CC1BO,IAAMqT,EAAwBhB,EACnC,gtHCGWiB,eAAK,WAmEhB,SAAAA,EACkBtP,EACAuP,EACAhB,EACAiB,GAAwB1U,KAHxBkF,aACAuP,EAAAA,KAAAA,cACAhB,EAAAA,KAAAA,oBACAiB,iBAAA,EAHA1U,KAAOkF,QAAPA,EACAlF,KAAQyU,SAARA,EACAzU,KAAOyT,QAAPA,EACAzT,KAAW0U,YAAXA,CACf,CAACF,EAvEgBpJ,OAAA,SAAMlJ,GACxB,IAAAiG,EAAUjG,EAAViG,WACAP,EAAM1F,EAAN0F,OACA+M,EAA6BzS,EAA7ByS,8BAC2B,IAC3B,IAAIzP,EAA+B,KAC/BwP,EAAkC,KAAK,OAAA9T,QAAAC,2CAEvCkQ,SAAAA,IAAAlE,SAAAA,WAAAjM,QAAAC,QAkCI0T,EAAsBrP,EAAQ0P,eAAa5T,gBAEjD,IAAM6T,EAAWpS,EAAKqS,CAAAA,gBAAgB,GAASjV,GAAU,OAAAe,QAAAC,QACrCyQ,UAAUyD,aAAaC,aAAa,CACtDC,MAAOJ,KACP7T,KAAA,SAAAkU,GAEF,IAAM3R,EAAS2B,EAAQiQ,wBAJvBT,EAAWQ,GAKLzB,EAAU,IAAI2B,iBAAiBlQ,EAAS,uBAIpB,OAH1BuO,EAAQ4B,KAAKC,YAAY,CAAEhU,KAAM,YAAasG,OAAAA,EAAQO,WAAAA,IAEtD5E,EAAO2J,QAAQuH,GACfA,EAASvH,QAAQuG,GAAS7S,QAAAC,QAEpBqE,EAAQqQ,UAAQvU,KAEtB,WAAA,WAAWwT,EAAMtP,EAASuP,EAAUhB,EAASiB,EAAa,EAAA,EAAA,EAAA,CA1B1D,IAAMc,EACJlE,UAAUyD,aAAaU,0BAA0BtN,WAK7CsM,GAHNvP,EAAU,IAAI4N,OAAO4C,aACnBF,EAA+B,CAAErN,WAAAA,GAAe,KAEzBwN,iBAAiBrR,EACtC,WAAA,IAACkR,EAA4B,OAAA5U,QAAAC,QACzBqE,EAAQ0P,aAAad,UA3CjC,sGA2C4D9S,KAAAsD,WAAAA,EAAAA,CADpD,GACoDA,OAAAA,GAAAA,EAAAtD,KAAAsD,EAAAtD,KAAA6L,GAAAA,GAAA,CA/BxD,IAAMhN,EAAiC,CACrCsI,WAAY,CAAEyN,MAAOzN,GACrB0N,kBAAkB,EAClBC,kBAAkB,GAClB1F,gBAEEiB,KAAiBsD,EAA6B/T,OAAAA,QAAAC,QAExCiS,OAAOxB,UAAUyD,aAAagB,oBAAkB/U,KADlDgV,SAAAA,GAEN,IAAMC,EAAcD,EAAiBE,KACnC,SAAAC,GAGEA,MAAW,eAAXA,EAAE/G,MACF,CAAC,SAAU,YAAa,YAAY8G,KAAK,SAAAE,GAAO,OAC9CD,EAAEE,MAAMC,cAAcrO,SAASmO,EAAQ,EAE5C,GACGH,IACFpW,EAAQ0W,SAAW,CAAEX,MAAOK,EAAYM,UAAWnG,EAAAA,IAAAA,OAAAA,GAAAA,EAAApP,KAAAoP,EAAApP,KAAA+P,GAAAA,GA+BzD,6DArD2ChM,GAqDlCK,SAAAA,GAAOoR,IAAAA,EAAAC,EAGd,MAFW,OAAXD,EAAA9B,IAAA8B,EAAaE,YAAYrP,QAAQ,SAAA6H,UAASA,EAAMyH,MAAM,UACtDF,EAAAvR,IAAAuR,EAAStT,QACHiC,CACR,GACF,CAAC,MAAAlE,GAAA,OAAAN,QAAAO,OAAAD,SAAA6B,EAAAyR,EAAAxR,iBAAAD,EASYI,MAAK,WAAA,IAC4C,OAA5DnD,KAAK0U,YAAYgC,YAAYrP,QAAQ,SAAA6H,UAASA,EAAMyH,MAAM,GAAE/V,QAAAC,QAA5Db,KACWkF,QAAQ/B,SAAOnC,KAAA,WAAA,EAC5B,CAAC,MAAAE,GAAAN,OAAAA,QAAAO,OAAAD,EAAA,CAAA,EAAA6B,EAEM6T,SAAA,SAASpR,GACdxF,KAAKyT,QAAQ4B,KAAKC,YAAY,CAAEhU,KAAM,WAAYkE,QAAAA,GACpD,EAACgP,CAAA,CAjFe,GCJLqC,EAA2BtD,EACtC,2zECLWuD,0BA0BX,SAAAA,EACkB5R,EACAuP,EACAsC,EACAtD,QAHAvO,aAAA,EAAAlF,KACAyU,cAAA,EAAAzU,KACA+W,UACAtD,EAAAA,KAAAA,eAHAzT,KAAOkF,QAAPA,EACAlF,KAAQyU,SAARA,EACAzU,KAAI+W,KAAJA,EACA/W,KAAOyT,QAAPA,CACf,QAACqD,EA9BgB1L,OAAM,SAAAlJ,GACxB,IAAAiG,EAAUjG,EAAViG,WACAP,EAAM1F,EAAN0F,WAEA,IAAI1C,EAA+B,KAAK,OAAAtE,QAAAC,iCAGhC4T,GADNvP,EAAU,IAAIwQ,aAAa,CAAEvN,WAAAA,KACJwN,kBACnBoB,EAAO7R,EAAQ8R,cAChB9J,QAAQuH,GACbA,EAASvH,QAAQhI,EAAQ+R,aAAarW,QAAAC,QAChCgW,EAAyB3R,EAAQ0P,eAAa5T,KAAA,WACpD,IAAMyS,EAAU,IAAI2B,iBAAiBlQ,EAAS,0BAExB,OADtBuO,EAAQ4B,KAAKC,YAAY,CAAEhU,KAAM,YAAasG,OAAAA,IAC9C6L,EAAQvG,QAAQ6J,GAAMnW,QAAAC,QAEhBqE,EAAQqQ,UAAQvU,gBAEtB,OAAO,IAAI8V,EAAO5R,EAASuP,EAAUsC,EAAMtD,EAAS,EACtD,yBAdI,IAEIgB,EACAsC,sCAJgChS,CACpC,EAcKK,SAAAA,GAAOqR,IAAAA,EAEd,MADO,OAAPA,EAAAvR,IAAAuR,EAAStT,QACHiC,CACR,GACF,CAAC,MAAAlE,GAAAN,OAAAA,QAAAO,OAAAD,EAAA6B,CAAAA,EAAA+T,EAAA9T,UASYG,iBAAK,IACNvC,OAAAA,QAAAC,QAAJb,KAAKkF,QAAQ/B,SAAOnC,KAC5B,aAAA,CAAC,MAAAE,UAAAN,QAAAO,OAAAD,KAAA4V,CAAA,2FCxBU,IAAAI,eAAkB,SAAA/E,GAmE7B,SAAA+E,EACErX,EACAC,EACgBqX,EACAC,EACTC,GAAiCpX,IAAAA,EAIyB,OAFjEA,EAAAkS,EAAAhO,UAAMtE,EAASC,UAJCqX,WAAAlX,EAAAA,EACAmX,YAAA,EAAAnX,EACToX,cAAApX,EAAAA,EARDqX,wBAAkB,EAAArX,EAClBsX,yBAAmBtX,EAAAA,EAwCnBuX,sBAAwB,SAACnU,GAC/B,INxHgCoU,EAC5BrE,EM4HgB,cAAhBnT,EAAKI,QACPJ,EAAKH,WAAW+B,YAAY,CAC1B6V,kBN/H4BD,EMwHRpU,EAAM4H,KAAK,GAOuBmI,ON9HtDA,EAAS,IAAIzT,WAAW8X,GAEX3E,OAAOe,KAAKjP,OAAO+S,aAAYvF,MAAnBxN,OAAuBwO,MM+HtD,EAACnT,EAEO2X,uBAAyB,SAAA1V,GAAiC,IAA9B+I,EAAI/I,EAAJ+I,KAChB,YAAdA,EAAK3J,MACPrB,EAAKqC,WAAW2I,EAAK4M,SAAW,YAAc,WAElD,EAAC5X,EAEO6X,oBAAsB,SAACC,GAC7B9X,EAAKmX,OAAOL,KAAKA,KAAKiB,MAAQ/X,EAAKK,OACnCL,EAAKmX,OAAO3D,QAAQ4B,KAAKC,YAAY,CAAEhU,KAAM,qBAC7CrB,EAAKmX,OAAO3D,QAAQ4B,KAAKC,YAAY,CACnChU,KAAM,SACN8R,OAAQT,EAAoBoF,IAEhC,EAAC9X,EAEOgY,aAAe,WAErBhY,EAAKqC,WAAW,aAChBrC,EAAKmX,OAAO3D,QAAQ4B,KAAKC,YAAY,CAAEhU,KAAM,cAC7CrB,EAAKmX,OAAOL,KAAKA,KAAKmB,6BACpB,KACAjY,EAAKmX,OAAOlS,QAAQiT,YAAc,GAIpCrN,WAAW,WACT7K,EAAKmX,OAAOL,KAAKA,KAAKiB,MAAQ/X,EAAKK,OACnCL,EAAKmX,OAAO3D,QAAQ4B,KAAKC,YAAY,CAAEhU,KAAM,oBAC/C,EAAG,IACL,EAACrB,EAEOmY,gBAAkB,SAACC,GACzB,GAA6B,IAAzBA,EAAclR,OAChB,OAAO,EAMT,IADA,IAAI7G,EAAS,EACJ4S,EAAI,EAAGA,EAAImF,EAAclR,OAAQ+L,IACxC5S,GAAU+X,EAAcnF,GAAK,IAI/B,OAFA5S,GAAU+X,EAAclR,QAER,EAAI,EAAI7G,EAAS,EAAI,EAAIA,CAC3C,EA7FkBL,EAAKkX,MAALA,EACAlX,EAAMmX,OAANA,EACTnX,EAAQoX,SAARA,EAGPpX,EAAKkX,MAAM1D,QAAQ4B,KAAKiD,UAAYrY,EAAKuX,sBACzCvX,EAAKmX,OAAO3D,QAAQ4B,KAAKiD,UAAYrY,EAAK2X,uBAAuB3X,CACnE,CAACkL,EAAA+L,EAAA/E,GAAA+E,EA5EmB5E,sBAClBzS,GAAuB,IAAA0Y,IAAAA,aAAA,OAAAxT,EAAA,kBAqBnBnE,QAAAC,QAG6ByQ,UAAUyD,aAAaC,aAAa,CACjEC,OAAO,KACPjU,cAAAkU,GAAC,OAFHsD,EAAsBtD,EAEnBtU,QAAAC,QAEG4Q,EAAWc,EAAYC,kBAAgBxR,KAAAJ,WAAAA,OAAAA,QAAAC,QAC1BqQ,EAAiBrR,IAAQmB,KAAAyR,SAAAA,GAAC,OAA7C3S,EAAU2S,EAAmC7R,QAAAC,QACrBD,QAAQ6X,IAAI,CAClCjE,EAAMpJ,OAAM3I,EACP3C,GAAAA,EAAW6K,YAAW,CACzBgK,8BAA+B9U,EAAQ8U,iCAEzCmC,EAAO1L,OAAOtL,EAAW8K,iBACzB5J,KAAA,SAAA0X,GAAAC,IAAAA,EAKF,OAXCxB,EAAKuB,EAAA,GAAEtB,EAAMsB,YAQdC,EAAAH,IAAAG,EAAwBjC,YAAYrP,QAAQ,SAAA6H,UAASA,EAAMyH,MAAM,GACjE6B,EAAyB,SAEdtB,EACT3E,EACAzS,EACAqX,EACAC,EACAC,EACA,QACJ,EAAC,SAAQjS,OAAOwT,EAAAlG,EAAAmG,EAGM,OAFpBtG,EAAY1P,eAAe,CAAExC,OAAQ,iBACrCuY,OAAAA,EAAAJ,IAAAI,EAAwBlC,YAAYrP,QAAQ,SAAA6H,GAAS,OAAAA,EAAMyH,MAAM,UACjEjE,EAAA5S,IAAA4S,EAAYvP,QAAQvC,QAAAC,QACdgY,OADcA,EACd1B,QAAA0B,EAAAA,EAAO1V,SAAOnC,KAAA8X,WAAAA,IAAAA,SAAAlY,QAAAC,eAAAiY,EACd1B,UAAA0B,EAAQ3V,SAAOnC,yBAAAoP,IAKrB,MAAMhL,CAAM,KAAAyH,EAAA9H,EAAA,eAJRgU,EAAA,OAAAnY,QAAAC,eAAAkY,EACI1B,UAAA0B,EAAUC,WAAShY,KAAA,WACzBqW,EAAW,IAAK,EAClB,uBAACxK,GAAAA,EAAA7L,KAAA6L,EAAA7L,KAAAoP,GAAAA,GAAA,EAAA,EAEH,EAAC,EAzDKmC,EAAc3S,EAAiB2C,eAAe1C,GAEpD0S,EAAY1P,eAAe,CAAExC,OAAQ,eACrCkS,EAAYzP,wBAAwB,CAAErC,iBAAiB,IAEvD,IAAI0W,EAAsB,KACtBrX,EAAoC,KACpCsX,EAAwB,KACxBoB,EAA6C,KAE7CnB,EAAoC,KAAKtG,WAAAkI,GAAA,GACtB,OADsBA,EACzCpZ,EAAQqZ,cAAWD,EAAQ3U,CAAAA,IAAAA,EAAAS,EAAA,kBACzBnE,QAAAC,QACeyQ,UAAU+F,SAAS8B,QAAQ,WAASnY,KAAA,SAAAoY,GAArD/B,EAAQ+B,CAA8C,EACxD,EAAC9U,cAAAA,GAAAA,GAAAA,EAAAtD,KAAA,OAAAsD,EAAAtD,8BAAAJ,QAAAC,QAAAkQ,GAAAA,EAAA/P,KAAA+P,EAAA/P,KAAAuX,GAAAA,IA4CL,CAAC,MAAArX,GAAAN,OAAAA,QAAAO,OAAAD,EAAA6B,CAAAA,EAAAA,IAAAA,EAAAmU,EAAAlU,UAuIAkU,OAvIAnU,EAiBwBhC,4BAAgB,IAAA,IAAAb,EAAAF,KAAA,OAAAY,QAAAC,QAAAsR,EAAAnP,UAC3BjC,iBAAgBoD,KAAAjE,IAAAc,KAAAqY,WAAAA,SAAAA,WAAAzY,QAAAC,QAMtBX,EAAKiX,MAAMhU,SAAOnC,KAAAJ,WAAAA,OAAAA,QAAAC,QAClBX,EAAKkX,OAAOjU,SAAOnC,KAAAsY,WAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAvU,EAAA,eANrBwU,EAAA,OAAA3Y,QAAAC,QACiB,OADjB0Y,EACIrZ,EAAKmX,eAAQ,EAAbkC,EAAeP,WAAShY,KAAA,WAC9Bd,EAAKmX,SAAW,IAAK,EACvB,EAAC,WAAA,GAAA,OAAAiC,GAAAA,EAAAtY,KAAAsY,EAAAtY,KAAAqY,GAAAA,GAIH,EAAA,CAAC,MAAAnY,UAAAN,QAAAO,OAAAD,KAAA6B,EAEkBxB,mBAAA,SAAmB8B,GACpC8O,EAAAnP,UAAMzB,mBAAkB4C,KAAAnE,KAACqD,GACzBrD,KAAKiY,cACP,EAAClV,EAEkBnB,YAAA,SAAYyB,GACzBrD,KAAKG,wBAA0BkD,EAAMmW,YAAY1X,WACnD9B,KAAKH,QAAQ+C,QAAQS,EAAMmW,YAAYC,eACvCzZ,KAAK8X,oBAAoBzU,EAAMmW,YAAYC,eAC3CzZ,KAAKO,eAAiB8C,EAAMmW,YAAY1X,SACxC9B,KAAKoD,wBACLpD,KAAKsC,WAAW,YAEpB,EAACS,EA8DMwC,YAAA,SAAYC,GAEbxF,KAAKF,sBAAsB0M,EAC7BxM,KAAKF,WAAWyF,YAAYC,GAG5BxF,KAAKmX,MAAMP,SAASpR,EAExB,EAACzC,EAEM0C,0BAAA,WAKL,OAJuB,MAAnBzF,KAACsX,qBAALtX,KAAKsX,mBAAuB,IAAI3X,WAC9BK,KAAKmX,MAAM1C,SAASiF,oBAEtB1Z,KAAKmX,MAAM1C,SAASkF,qBAAqB3Z,KAAKsX,yBAClCA,kBACd,EAACvU,EAEM2C,2BAAA,WAKL,OAJwB,MAApB1F,KAACuX,sBAALvX,KAAKuX,oBAAwB,IAAI5X,WAC/BK,KAAKoX,OAAO3C,SAASiF,oBAEvB1Z,KAAKoX,OAAO3C,SAASkF,qBAAqB3Z,KAAKuX,0BACnCA,mBACd,EAACxU,EAEM4C,eAAA,WACL,OAAW3F,KAACoY,gBAAgBpY,KAAKyF,4BACnC,EAAC1C,EAEM6C,gBAAA,WACL,OAAW5F,KAACoY,gBAAgBpY,KAAK0F,6BACnC,EAACwR,CAAA,CArM4B,CAAQtX,GCa1Bga,eAAa,SAAAzH,GAAAyH,SAAAA,WAAAzH,EAAAC,MAAApS,KAAAqS,YAAAlH,IAAAA,CAKvByO,OALuBzO,EAAAyO,EAAAzH,GAAAyH,EACVtH,aAAP,SAAoBzS,GACzB,OAAOA,EAAQiK,SACXoI,EAAiBI,aAAazS,GAC9BqX,EAAkB5E,aAAazS,EACrC,EAAC+Z,CAAA,CALuB,CAAQha,4GCzBlB,SACdwC,EACA0D,EACA0F,GAEA,YAFAA,IAAAA,IAAAA,EALuB,6BAOhBsC,MAAStC,EAAkCpJ,4BAAAA,EAA2B,YAAA,CAC3EyX,OAAQ,OACR7J,KAAMtL,KAAKC,UAAU,CACnBmV,SAAUhU,EAAO,OAAS,YAE5BiU,QAAS,CACP,eAAgB,qBAGtB"}